<<<<<<< HEAD
import type { Document } from '../../bson';
import type { Collection } from '../../collection';
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
import { type TimeoutContext } from '../../timeout';
import { AbstractOperation } from '../operation';

/** @internal */
export class UpdateSearchIndexOperation extends AbstractOperation<void> {
=======
import type { Document } from 'bson';

import type { Collection } from '../../collection';
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
import type { Callback } from '../../utils';
import { AbstractCallbackOperation } from '../operation';

/** @internal */
export class UpdateSearchIndexOperation extends AbstractCallbackOperation<void> {
>>>>>>> ccec36d3d50f58e38df9f21950d9c1333aa75de1
  constructor(
    private readonly collection: Collection,
    private readonly name: string,
    private readonly definition: Document
  ) {
    super();
  }

<<<<<<< HEAD
  override get commandName() {
    return 'updateSearchIndex' as const;
  }

  override async execute(
    server: Server,
    session: ClientSession | undefined,
    timeoutContext: TimeoutContext
  ): Promise<void> {
=======
  executeCallback(
    server: Server,
    session: ClientSession | undefined,
    callback: Callback<void>
  ): void {
>>>>>>> ccec36d3d50f58e38df9f21950d9c1333aa75de1
    const namespace = this.collection.fullNamespace;
    const command = {
      updateSearchIndex: namespace.collection,
      name: this.name,
      definition: this.definition
    };

<<<<<<< HEAD
    await server.command(namespace, command, { session, timeoutContext });
    return;
=======
    server.command(namespace, command, { session }, err => {
      if (err) {
        callback(err);
        return;
      }

      callback();
    });
>>>>>>> ccec36d3d50f58e38df9f21950d9c1333aa75de1
  }
}
